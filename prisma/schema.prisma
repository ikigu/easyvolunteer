generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              String @id @default(uuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())
  firstName       String
  lastName        String
  email           String @unique
  password        String
  profilePhotoUrl String?
  birthday        DateTime?
  phoneNumber     Int?
  streetName      String?
  houseName       String?
  houseNumber     String?
  town            String?
  organizations   Organization[]
  eventsAttending EventAttendee[]
  eventsCreated   Event[]
}

model Organization {
  id              String @id @default(uuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())
  name            String
  town            String?
  industry        String?
  events          Event[]
  Owner           User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
}

model Event {
  id                String @id @default(uuid())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())
  organization      Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdBy         User @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId         String
  organizationId    String
  title             String
  startTime         DateTime
  endTime           DateTime
  cost              Int
  description       String?
  participantRoles  ParticipantRole[]
  volunteerRoles    VolunteerRole[]
  attendees         EventAttendee[]
}

model EventAttendee {
  id                String @id @default(uuid())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId            String
  event             Event @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  eventId           String
  participantRole   ParticipantRole? @relation(fields: [participantRoleId], references:[id], onDelete: Cascade, onUpdate: Cascade)
  participantRoleId String?
  volunteerRole     VolunteerRole? @relation(fields: [volunteerRoleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  volunteerRoleId   String?
}

model ParticipantRole {
  id              String @id @default(uuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())
  event           Event @relation(fields: [eventId], references: [id])
  eventId         String
  title           String
  description     String
  participants    EventAttendee[]
}

model VolunteerRole {
  id              String @id @default(uuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())
  event           Event @relation(fields: [eventId], references: [id])
  eventId         String
  title           String
  description     String?
  volunteers      EventAttendee[]
}