generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              String @id @default(uuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())

  firstName       String
  lastName        String
  email           String @unique
  password        String

  profilePhotoUrl String?

  birthday        DateTime?

  phoneNumber     Int?
  streetName      String?
  houseName       String?
  houseNumber     String?
  town            String?
  
  organizations   Organization[]
  eventsAttending EventAttendee[]
  eventsCreated   Event[]

  @@map("users")
}

model Organization {
  id              String @id @default(uuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())
  name            String
  
  town            String?
  industry        String?
  description     String?
  
  owner           User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId          String
  
  events          Event[]

  @@map("organizations")
}

model Event {
  id                  String @id @default(uuid())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @default(now())

  createdBy           User @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId           String

  organization        Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId      String

  title               String
  description         String?

  startTime           DateTime
  endTime             DateTime

  cost                Int

  eventAttendeeRoles  EventAttendeeRole[]
  attendees           EventAttendee[]

  @@map("events")
}

model EventAttendee {
  id                String @id @default(uuid())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())

  user              User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId            String

  event             Event @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  eventId           String

  roleType          EventAttendeeRoleType // "Volunteer" or "Participant" | Strings

  role              EventAttendeeRole? @relation(fields: [roleId], references:[id], onDelete: Cascade, onUpdate: Cascade)
  roleId String?

  @@map("event_attendees")
}

enum EventAttendeeRoleType {
  Volunteer
  Participant
}

model EventAttendeeRole {
  id              String @id @default(uuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())

  event           Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId         String

  type            EventAttendeeRoleType // "Volunteer" or "Participant": Strings

  title           String
  description     String?

  participants    EventAttendee[]

  @@map("event_attendee_roles")
}

